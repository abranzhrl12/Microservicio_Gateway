# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AssignPermissionsToRoleInput {
  permissionIds: [ID!]!
  roleId: Int!
}

type AuthResponse {
  accessToken: String!

  """Access token expiration time in seconds."""
  accessTokenExpiresIn: Float

  """Elementos del menú del sidebar del usuario"""
  menuItems: [MenuItem!]
  refreshToken: String

  """Refresh token expiration time in seconds."""
  refreshTokenExpiresIn: Float
  user: User!
}

input CreateMenuItemInput {
  icon: String
  isActive: Boolean! = true
  label: String!
  order: Float! = 0
  parentId: ID
  path: String!
  requiredPermissions: [String!]
}

input CreatePermissionInput {
  description: String
  name: String!
}

input CreateRoleInput {
  description: String
  name: String!
}

input CreateUserInput {
  avatarPublicId: String
  avatarUrl: String

  """Número de Documento Nacional de Identidad (DNI)."""
  dni: String
  email: String!
  isActive: Boolean! = true
  lastName: String
  name: String!
  password: String!

  """ID del rol asignado al usuario"""
  roleId: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Resultado de la subida de un archivo."""
type FileUploadResultModel {
  """El nombre original del archivo."""
  fileName: String!

  """El tipo MIME del archivo."""
  mimetype: String!

  """El ID público del archivo para operaciones de eliminación/consulta."""
  publicId: String!

  """El tamaño del archivo en bytes."""
  size: Int!

  """La URL pública del archivo subido."""
  url: String!
}

input LoginInput {
  email: String!
  password: String!
}

type MenuItem {
  """Hijos del ítem de menú."""
  children: [MenuItem!]
  createdAt: DateTime!
  icon: String
  id: ID!
  isActive: Boolean!
  label: String!

  """Orden de visualización del ítem de menú."""
  order: Int!

  """El ítem de menú padre."""
  parent: MenuItem

  """ID del ítem de menú padre."""
  parentId: ID
  path: String

  """Permisos requeridos para ver el ítem del menú."""
  requiredPermissions: [String!]
  updatedAt: DateTime!
}

type Mutation {
  """
  Asigna permisos a un rol específico (requiere permiso de gestión de roles y permisos).
  """
  assignPermissionsToRole(assignPermissionsToRoleInput: AssignPermissionsToRoleInput!): Role!

  """
  Crea un nuevo ítem de menú (requiere permiso de gestión de ítems de menú).
  """
  createMenuItem(createMenuItemInput: CreateMenuItemInput!): MenuItem!
  createPermission(createPermissionInput: CreatePermissionInput!): Permission!
  createRole(createRoleInput: CreateRoleInput!): Role!
  createUser(createUserInput: CreateUserInput!): User!

  """Elimina un archivo del servicio de archivos."""
  deleteFile(publicId: String!): Boolean!
  loginUser(loginInput: LoginInput!): AuthResponse!
  refreshToken(refreshToken: String!): AuthResponse!

  """Elimina un permiso necesitar tener permiso de admin"""
  removePermission(id: ID!): Boolean!

  """Elimina un rol (requiere permiso para eliminar roles)."""
  removeRole(id: ID!): Boolean!
  updatePermission(id: ID!, updatePermissionInput: UpdatePermissionInput!): Permission!
  updateRole(id: ID!, updateRoleInput: UpdateRoleInput!): Role!

  """
  Actualiza los datos de un usuario por su ID (requiere permiso para gestionar usuarios).
  """
  updateUser(id: ID!, updateUserInput: UpdateUserInput!): User!

  """
  Actualiza el estado activo/inactivo de un usuario (requiere permiso para gestionar estados de usuario).
  """
  updateUserStatus(id: ID!, updateUserStatusInput: UpdateUserStatusInput!): User!

  """Sube un archivo y lo almacena en el servicio de archivos."""
  uploadFile(file: Upload!): FileUploadResultModel!
}

type PaginatedPermissions {
  currentPage: Int!
  items: [Permission!]
  itemsPerPage: Int!
  totalItems: Int!
  totalPages: Int!
}

"""Respuesta paginada para la lista de roles."""
type PaginatedRoles {
  currentPage: Int!
  items: [Role!]
  itemsPerPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type PaginatedUsers {
  currentPage: Int!
  items: [User!]
  itemsPerPage: Int!
  totalItems: Int!
  totalPages: Int!
}

input PaginationInput {
  """Cantidad de elementos por página (por defecto: 10)."""
  limit: Int = 10

  """Número de página deseada (por defecto: 1)."""
  page: Int = 1
}

type Permission {
  description: String
  id: ID!
  name: String!
  roles: [Role!]
}

type Query {
  findAllPermissions(paginationInput: PaginationInput): PaginatedPermissions!
  findAllRoles(paginationInput: PaginationInput): PaginatedRoles!
  findAllUsers(paginationInput: PaginationInput): PaginatedUsers!

  """
  Obtiene un permiso por su nombre (requiere permiso de vista de permisos).
  """
  findPermissionByName(name: String!): Permission!

  """Obtiene un rol por su ID."""
  findRoleById(id: ID!): Role!

  """Busca y filtra usuarios con paginación."""
  searchUsers(paginationInput: UsersPaginationInput): PaginatedUsers!
}

type Role {
  createdAt: DateTime
  description: String
  id: ID!
  name: String!

  """Permisos asociados a este rol."""
  permissions: [Permission!]
  updatedAt: DateTime
}

input UpdatePermissionInput {
  description: String
  id: ID
  name: String
}

input UpdateRoleInput {
  description: String
  name: String
}

input UpdateUserInput {
  """
  Archivo de avatar a subir. Si se proporciona, se ignorará avatarUrl y avatarPublicId directos.
  """
  avatarFile: Upload

  """ID público de la nueva imagen de perfil en Cloudinary/BunnyCDN."""
  avatarPublicId: String

  """URL de la nueva imagen de perfil del usuario."""
  avatarUrl: String

  """Número de Documento Nacional de Identidad (DNI)."""
  dni: String
  email: String
  isActive: Boolean
  lastName: String
  name: String
  password: String

  """Nuevo ID del rol para el usuario."""
  roleId: Int
}

input UpdateUserStatusInput {
  isActive: Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatarPublicId: String
  avatarUrl: String
  createdAt: DateTime!
  dni: String
  email: String!
  id: ID!
  isActive: Boolean!
  lastName: String
  name: String!
  role: Role
  roleId: ID
  updatedAt: DateTime!
}

input UsersPaginationInput {
  dniFilter: String
  emailFilter: String

  """Cantidad de elementos por página (por defecto: 10)."""
  limit: Int = 10
  nameFilter: String

  """Número de página deseada (por defecto: 1)."""
  page: Int = 1
  roleIdFilter: Int
}